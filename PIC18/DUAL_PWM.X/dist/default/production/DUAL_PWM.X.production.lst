

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Fri Jun 23 13:42:32 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F15Q40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13   000000                     
    14                           ; Generated 23/03/2023 GMT
    15                           ; 
    16                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC18F15Q40 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48   000000                     _RB6PPS	set	527
    49   000000                     _TRISBbits	set	1223
    50   000000                     _TRISCbits	set	1224
    51   000000                     _RC7PPS	set	536
    52   000000                     _PWM1ERS	set	1120
    53   000000                     _PWM1PR	set	1123
    54   000000                     _PWM1CLK	set	1121
    55   000000                     _PWM1GIE	set	1128
    56   000000                     _PWM1CPRE	set	1125
    57   000000                     _PWM1S1P2	set	1133
    58   000000                     _PWM1S1P1	set	1131
    59   000000                     _PWM1S1CFGbits	set	1130
    60   000000                     _PWM1CONbits	set	1129
    61                           
    62                           ; #config settings
    63                           
    64                           	psect	cinit
    65   007E46                     __pcinit:
    66                           	callstack 0
    67   007E46                     start_initialization:
    68                           	callstack 0
    69   007E46                     __initialization:
    70                           	callstack 0
    71   007E46                     end_of_initialization:
    72                           	callstack 0
    73   007E46                     __end_of__initialization:
    74                           	callstack 0
    75   007E46  0100               	movlb	0
    76   007E48  EF26  F03F         	goto	_main	;jump to C main() function
    77                           
    78                           	psect	cstackCOMRAM
    79   000501                     __pcstackCOMRAM:
    80                           	callstack 0
    81   000501                     setPWM@address:
    82                           	callstack 0
    83                           
    84                           ; 2 bytes @ 0x0
    85   000501                     	ds	2
    86   000503                     setPWM@duty_cycle:
    87                           	callstack 0
    88                           
    89                           ; 1 bytes @ 0x2
    90   000503                     	ds	1
    91   000504                     ??_setPWM:
    92                           
    93                           ; 1 bytes @ 0x3
    94   000504                     	ds	3
    95   000507                     setPWM@pDutyReg:
    96                           	callstack 0
    97                           
    98                           ; 2 bytes @ 0x6
    99   000507                     	ds	2
   100   000509                     setPWM@conReg:
   101                           	callstack 0
   102                           
   103                           ; 2 bytes @ 0x8
   104   000509                     	ds	2
   105   00050B                     setPWM@pConReg:
   106                           	callstack 0
   107                           
   108                           ; 2 bytes @ 0xA
   109   00050B                     	ds	2
   110   00050D                     setPWM@temp:
   111                           	callstack 0
   112                           
   113                           ; 2 bytes @ 0xC
   114   00050D                     	ds	2
   115   00050F                     ??_loop:
   116                           
   117                           ; 1 bytes @ 0xE
   118   00050F                     	ds	1
   119   000510                     loop@buffer2:
   120                           	callstack 0
   121                           
   122                           ; 2 bytes @ 0xF
   123   000510                     	ds	2
   124   000512                     loop@i:
   125                           	callstack 0
   126                           
   127                           ; 2 bytes @ 0x11
   128   000512                     	ds	2
   129   000514                     
   130                           ; 1 bytes @ 0x13
   131 ;;
   132 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   133 ;;
   134 ;; *************** function _main *****************
   135 ;; Defined at:
   136 ;;		line 90 in file "main.c"
   137 ;; Parameters:    Size  Location     Type
   138 ;;		None
   139 ;; Auto vars:     Size  Location     Type
   140 ;;		None
   141 ;; Return value:  Size  Location     Type
   142 ;;                  1    wreg      void 
   143 ;; Registers used:
   144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   145 ;; Tracked objects:
   146 ;;		On entry : 0/0
   147 ;;		On exit  : 0/0
   148 ;;		Unchanged: 0/0
   149 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12
   150 ;;      Params:         0       0       0       0       0       0       0       0       0
   151 ;;      Locals:         0       0       0       0       0       0       0       0       0
   152 ;;      Temps:          0       0       0       0       0       0       0       0       0
   153 ;;      Totals:         0       0       0       0       0       0       0       0       0
   154 ;;Total ram usage:        0 bytes
   155 ;; Hardware stack levels required when called: 2
   156 ;; This function calls:
   157 ;;		_PWMsetup
   158 ;;		_loop
   159 ;; This function is called by:
   160 ;;		Startup code after reset
   161 ;; This function uses a non-reentrant model
   162 ;;
   163                           
   164                           	psect	text0
   165   007E4C                     __ptext0:
   166                           	callstack 0
   167   007E4C                     _main:
   168                           	callstack 125
   169   007E4C                     
   170                           ;main.c: 91:     PWMsetup();
   171   007E4C  EC2E  F03F         	call	_PWMsetup	;wreg free
   172   007E50                     l814:
   173                           
   174                           ;main.c: 93:         loop();
   175   007E50  EC53  F03F         	call	_loop	;wreg free
   176   007E54  EF28  F03F         	goto	l814
   177   007E58  EFFE  F03F         	goto	start
   178   007E5C                     __end_of_main:
   179                           	callstack 0
   180                           
   181 ;; *************** function _loop *****************
   182 ;; Defined at:
   183 ;;		line 65 in file "main.c"
   184 ;; Parameters:    Size  Location     Type
   185 ;;		None
   186 ;; Auto vars:     Size  Location     Type
   187 ;;  i               2   17[COMRAM] unsigned short 
   188 ;;  buffer2         2   15[COMRAM] int 
   189 ;;  buffer1         2    0        int 
   190 ;;  pwm12           2    0        const PTR volatile int 
   191 ;;		 -> RAM(3327), 
   192 ;;  pwm11           2    0        const PTR volatile int 
   193 ;;		 -> RAM(3327), 
   194 ;; Return value:  Size  Location     Type
   195 ;;                  1    wreg      void 
   196 ;; Registers used:
   197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   198 ;; Tracked objects:
   199 ;;		On entry : 0/0
   200 ;;		On exit  : 0/0
   201 ;;		Unchanged: 0/0
   202 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12
   203 ;;      Params:         0       0       0       0       0       0       0       0       0
   204 ;;      Locals:         4       0       0       0       0       0       0       0       0
   205 ;;      Temps:          1       0       0       0       0       0       0       0       0
   206 ;;      Totals:         5       0       0       0       0       0       0       0       0
   207 ;;Total ram usage:        5 bytes
   208 ;; Hardware stack levels used: 1
   209 ;; Hardware stack levels required when called: 1
   210 ;; This function calls:
   211 ;;		_setPWM
   212 ;; This function is called by:
   213 ;;		_main
   214 ;; This function uses a non-reentrant model
   215 ;;
   216                           
   217                           	psect	text1
   218   007EA6                     __ptext1:
   219                           	callstack 0
   220   007EA6                     _loop:
   221                           	callstack 125
   222   007EA6                     
   223                           ;main.c: 69:     int buffer2 = 0x46D;
   224   007EA6  0E04               	movlw	4
   225   007EA8  6E11               	movwf	(loop@buffer2+1)^(0+1280),c
   226   007EAA  0E6D               	movlw	109
   227   007EAC  6E10               	movwf	loop@buffer2^(0+1280),c
   228   007EAE                     
   229                           ;main.c: 76:     for(uint16_t i = 0; i < 0x00C8; i++){
   230   007EAE  0E00               	movlw	0
   231   007EB0  6E13               	movwf	(loop@i+1)^(0+1280),c
   232   007EB2  0E00               	movlw	0
   233   007EB4  6E12               	movwf	loop@i^(0+1280),c
   234   007EB6                     l804:
   235                           
   236                           ;main.c: 84:         setPWM(0x046B, i);
   237   007EB6  0E04               	movlw	4
   238   007EB8  6E02               	movwf	(setPWM@address+1)^(0+1280),c
   239   007EBA  0E6B               	movlw	107
   240   007EBC  6E01               	movwf	setPWM@address^(0+1280),c
   241   007EBE  C512  F503         	movff	loop@i,setPWM@duty_cycle
   242   007EC2  EC78  F03F         	call	_setPWM	;wreg free
   243   007EC6                     
   244                           ;main.c: 86:         _delay((unsigned long)((10)*(4000000/4000.0)));
   245   007EC6  0E0D               	movlw	13
   246   007EC8  6E0F               	movwf	??_loop^(0+1280),c
   247   007ECA  0EFC               	movlw	252
   248   007ECC                     u117:
   249   007ECC  2EE8               	decfsz	wreg,f,c
   250   007ECE  D7FE               	bra	u117
   251   007ED0  2E0F               	decfsz	??_loop^(0+1280),f,c
   252   007ED2  D7FC               	bra	u117
   253   007ED4                     
   254                           ;main.c: 87:     }
   255   007ED4  4A12               	infsnz	loop@i^(0+1280),f,c
   256   007ED6  2A13               	incf	(loop@i+1)^(0+1280),f,c
   257   007ED8  5013               	movf	(loop@i+1)^(0+1280),w,c
   258   007EDA  E109               	bnz	u100
   259   007EDC  0EC8               	movlw	200
   260   007EDE  5C12               	subwf	loop@i^(0+1280),w,c
   261   007EE0  A0D8               	btfss	status,0,c
   262   007EE2  EF75  F03F         	goto	u101
   263   007EE6  EF77  F03F         	goto	u100
   264   007EEA                     u101:
   265   007EEA  EF5B  F03F         	goto	l804
   266   007EEE                     u100:
   267   007EEE  0012               	return		;funcret
   268   007EF0                     __end_of_loop:
   269                           	callstack 0
   270                           
   271 ;; *************** function _setPWM *****************
   272 ;; Defined at:
   273 ;;		line 46 in file "main.c"
   274 ;; Parameters:    Size  Location     Type
   275 ;;  address         2    0[COMRAM] int 
   276 ;;  duty_cycle      1    2[COMRAM] unsigned char 
   277 ;; Auto vars:     Size  Location     Type
   278 ;;  temp            2   12[COMRAM] int 
   279 ;;  pConReg         2   10[COMRAM] const PTR volatile int 
   280 ;;		 -> RAM(3327), 
   281 ;;  conReg          2    8[COMRAM] int 
   282 ;;  pDutyReg        2    6[COMRAM] const PTR volatile int 
   283 ;;		 -> RAM(3327), 
   284 ;; Return value:  Size  Location     Type
   285 ;;                  1    wreg      void 
   286 ;; Registers used:
   287 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   288 ;; Tracked objects:
   289 ;;		On entry : 0/0
   290 ;;		On exit  : 0/0
   291 ;;		Unchanged: 0/0
   292 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12
   293 ;;      Params:         3       0       0       0       0       0       0       0       0
   294 ;;      Locals:         8       0       0       0       0       0       0       0       0
   295 ;;      Temps:          3       0       0       0       0       0       0       0       0
   296 ;;      Totals:        14       0       0       0       0       0       0       0       0
   297 ;;Total ram usage:       14 bytes
   298 ;; Hardware stack levels used: 1
   299 ;; This function calls:
   300 ;;		Nothing
   301 ;; This function is called by:
   302 ;;		_loop
   303 ;; This function uses a non-reentrant model
   304 ;;
   305                           
   306                           	psect	text2
   307   007EF0                     __ptext2:
   308                           	callstack 0
   309   007EF0                     _setPWM:
   310                           	callstack 125
   311   007EF0                     
   312                           ;main.c: 47:     int temp = address >> 4;
   313   007EF0  C501  F504         	movff	setPWM@address,??_setPWM
   314   007EF4  C502  F505         	movff	setPWM@address+1,??_setPWM+1
   315   007EF8  0E04               	movlw	4
   316   007EFA  6E06               	movwf	(??_setPWM+2)^(0+1280),c
   317   007EFC                     u65:
   318   007EFC  3405               	rlcf	(??_setPWM+1)^(0+1280),w,c
   319   007EFE  3205               	rrcf	(??_setPWM+1)^(0+1280),f,c
   320   007F00  3204               	rrcf	??_setPWM^(0+1280),f,c
   321   007F02  2E06               	decfsz	(??_setPWM+2)^(0+1280),f,c
   322   007F04  EF7E  F03F         	goto	u65
   323   007F08  C504  F50D         	movff	??_setPWM,setPWM@temp
   324   007F0C  C505  F50E         	movff	??_setPWM+1,setPWM@temp+1
   325                           
   326                           ;main.c: 48:     int conReg;;main.c: 49:     if(temp == 0x046){
   327   007F10  0E46               	movlw	70
   328   007F12  180D               	xorwf	setPWM@temp^(0+1280),w,c
   329   007F14  100E               	iorwf	(setPWM@temp+1)^(0+1280),w,c
   330   007F16  A4D8               	btfss	status,2,c
   331   007F18  EF90  F03F         	goto	u71
   332   007F1C  EF92  F03F         	goto	u70
   333   007F20                     u71:
   334   007F20  EFA4  F03F         	goto	l34
   335   007F24                     u70:
   336   007F24                     
   337                           ;main.c: 50:         conReg = temp << 4 | 0x0009;
   338   007F24  C50D  F504         	movff	setPWM@temp,??_setPWM
   339   007F28  C50E  F505         	movff	setPWM@temp+1,??_setPWM+1
   340   007F2C  3A04               	swapf	??_setPWM^(0+1280),f,c
   341   007F2E  3A05               	swapf	(??_setPWM+1)^(0+1280),f,c
   342   007F30  0EF0               	movlw	240
   343   007F32  1605               	andwf	(??_setPWM+1)^(0+1280),f,c
   344   007F34  5004               	movf	??_setPWM^(0+1280),w,c
   345   007F36  0B0F               	andlw	15
   346   007F38  1205               	iorwf	(??_setPWM+1)^(0+1280),f,c
   347   007F3A  0EF0               	movlw	240
   348   007F3C  1604               	andwf	??_setPWM^(0+1280),f,c
   349   007F3E  0E09               	movlw	9
   350   007F40  1004               	iorwf	??_setPWM^(0+1280),w,c
   351   007F42  6E09               	movwf	setPWM@conReg^(0+1280),c
   352   007F44  5005               	movf	(??_setPWM+1)^(0+1280),w,c
   353   007F46  6E0A               	movwf	(setPWM@conReg+1)^(0+1280),c
   354   007F48                     l34:
   355                           
   356                           ;main.c: 52:     if(temp == 0x047){
   357   007F48  0E47               	movlw	71
   358   007F4A  180D               	xorwf	setPWM@temp^(0+1280),w,c
   359   007F4C  100E               	iorwf	(setPWM@temp+1)^(0+1280),w,c
   360   007F4E  A4D8               	btfss	status,2,c
   361   007F50  EFAC  F03F         	goto	u81
   362   007F54  EFAE  F03F         	goto	u80
   363   007F58                     u81:
   364   007F58  EFC0  F03F         	goto	l35
   365   007F5C                     u80:
   366   007F5C                     
   367                           ;main.c: 53:         conReg = temp << 4 | 0x0008;
   368   007F5C  C50D  F504         	movff	setPWM@temp,??_setPWM
   369   007F60  C50E  F505         	movff	setPWM@temp+1,??_setPWM+1
   370   007F64  3A04               	swapf	??_setPWM^(0+1280),f,c
   371   007F66  3A05               	swapf	(??_setPWM+1)^(0+1280),f,c
   372   007F68  0EF0               	movlw	240
   373   007F6A  1605               	andwf	(??_setPWM+1)^(0+1280),f,c
   374   007F6C  5004               	movf	??_setPWM^(0+1280),w,c
   375   007F6E  0B0F               	andlw	15
   376   007F70  1205               	iorwf	(??_setPWM+1)^(0+1280),f,c
   377   007F72  0EF0               	movlw	240
   378   007F74  1604               	andwf	??_setPWM^(0+1280),f,c
   379   007F76  0E08               	movlw	8
   380   007F78  1004               	iorwf	??_setPWM^(0+1280),w,c
   381   007F7A  6E09               	movwf	setPWM@conReg^(0+1280),c
   382   007F7C  5005               	movf	(??_setPWM+1)^(0+1280),w,c
   383   007F7E  6E0A               	movwf	(setPWM@conReg+1)^(0+1280),c
   384   007F80                     l35:
   385                           
   386                           ;main.c: 55:     if(temp == 0x048){
   387   007F80  0E48               	movlw	72
   388   007F82  180D               	xorwf	setPWM@temp^(0+1280),w,c
   389   007F84  100E               	iorwf	(setPWM@temp+1)^(0+1280),w,c
   390   007F86  A4D8               	btfss	status,2,c
   391   007F88  EFC8  F03F         	goto	u91
   392   007F8C  EFCA  F03F         	goto	u90
   393   007F90                     u91:
   394   007F90  EFDC  F03F         	goto	l36
   395   007F94                     u90:
   396   007F94                     
   397                           ;main.c: 56:         conReg = temp << 4 | 0x0007;
   398   007F94  C50D  F504         	movff	setPWM@temp,??_setPWM
   399   007F98  C50E  F505         	movff	setPWM@temp+1,??_setPWM+1
   400   007F9C  3A04               	swapf	??_setPWM^(0+1280),f,c
   401   007F9E  3A05               	swapf	(??_setPWM+1)^(0+1280),f,c
   402   007FA0  0EF0               	movlw	240
   403   007FA2  1605               	andwf	(??_setPWM+1)^(0+1280),f,c
   404   007FA4  5004               	movf	??_setPWM^(0+1280),w,c
   405   007FA6  0B0F               	andlw	15
   406   007FA8  1205               	iorwf	(??_setPWM+1)^(0+1280),f,c
   407   007FAA  0EF0               	movlw	240
   408   007FAC  1604               	andwf	??_setPWM^(0+1280),f,c
   409   007FAE  0E07               	movlw	7
   410   007FB0  1004               	iorwf	??_setPWM^(0+1280),w,c
   411   007FB2  6E09               	movwf	setPWM@conReg^(0+1280),c
   412   007FB4  5005               	movf	(??_setPWM+1)^(0+1280),w,c
   413   007FB6  6E0A               	movwf	(setPWM@conReg+1)^(0+1280),c
   414   007FB8                     l36:
   415                           
   416                           ;main.c: 58:     int volatile * const pConReg = (int *) conReg;
   417   007FB8  C509  F50B         	movff	setPWM@conReg,setPWM@pConReg
   418   007FBC  C50A  F50C         	movff	setPWM@conReg+1,setPWM@pConReg+1
   419   007FC0                     
   420                           ;main.c: 59:     *pConReg &= ~(0b10000000);
   421   007FC0  C50B  F4D9         	movff	setPWM@pConReg,fsr2l
   422   007FC4  C50C  F4DA         	movff	setPWM@pConReg+1,fsr2h
   423   007FC8  0E7F               	movlw	127
   424   007FCA  16DE               	andwf	postinc2,f,c
   425   007FCC  0EFF               	movlw	255
   426   007FCE  16DD               	andwf	postdec2,f,c
   427   007FD0                     
   428                           ;main.c: 60:     int volatile * const pDutyReg = (int *) address;
   429   007FD0  C501  F507         	movff	setPWM@address,setPWM@pDutyReg
   430   007FD4  C502  F508         	movff	setPWM@address+1,setPWM@pDutyReg+1
   431   007FD8                     
   432                           ;main.c: 61:     *pDutyReg = duty_cycle;
   433   007FD8  5003               	movf	setPWM@duty_cycle^(0+1280),w,c
   434   007FDA  6E04               	movwf	??_setPWM^(0+1280),c
   435   007FDC  6A05               	clrf	(??_setPWM+1)^(0+1280),c
   436   007FDE  C507  F4D9         	movff	setPWM@pDutyReg,fsr2l
   437   007FE2  C508  F4DA         	movff	setPWM@pDutyReg+1,fsr2h
   438   007FE6  C504  F4DE         	movff	??_setPWM,postinc2
   439   007FEA  C505  F4DD         	movff	??_setPWM+1,postdec2
   440   007FEE                     
   441                           ;main.c: 62:     *pConReg |= 0b10000000;
   442   007FEE  C50B  F4D9         	movff	setPWM@pConReg,fsr2l
   443   007FF2  C50C  F4DA         	movff	setPWM@pConReg+1,fsr2h
   444   007FF6  0E00               	movlw	0
   445   007FF8  8EDB               	bsf	plusw2,7,c
   446   007FFA  0012               	return		;funcret
   447   007FFC                     __end_of_setPWM:
   448                           	callstack 0
   449                           
   450 ;; *************** function _PWMsetup *****************
   451 ;; Defined at:
   452 ;;		line 13 in file "main.c"
   453 ;; Parameters:    Size  Location     Type
   454 ;;		None
   455 ;; Auto vars:     Size  Location     Type
   456 ;;		None
   457 ;; Return value:  Size  Location     Type
   458 ;;                  1    wreg      void 
   459 ;; Registers used:
   460 ;;		wreg, status,2
   461 ;; Tracked objects:
   462 ;;		On entry : 0/0
   463 ;;		On exit  : 0/0
   464 ;;		Unchanged: 0/0
   465 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12
   466 ;;      Params:         0       0       0       0       0       0       0       0       0
   467 ;;      Locals:         0       0       0       0       0       0       0       0       0
   468 ;;      Temps:          0       0       0       0       0       0       0       0       0
   469 ;;      Totals:         0       0       0       0       0       0       0       0       0
   470 ;;Total ram usage:        0 bytes
   471 ;; Hardware stack levels used: 1
   472 ;; This function calls:
   473 ;;		Nothing
   474 ;; This function is called by:
   475 ;;		_main
   476 ;; This function uses a non-reentrant model
   477 ;;
   478                           
   479                           	psect	text3
   480   007E5C                     __ptext3:
   481                           	callstack 0
   482   007E5C                     _PWMsetup:
   483                           	callstack 126
   484   007E5C                     
   485                           ;main.c: 15:     TRISCbits.TRISC7 = 0;
   486   007E5C  9EC8               	bcf	200,7,c	;volatile
   487                           
   488                           ;main.c: 16:     TRISBbits.TRISB6 = 0;
   489   007E5E  9CC7               	bcf	199,6,c	;volatile
   490   007E60                     
   491                           ;main.c: 18:     RB6PPS = 0x0A;
   492   007E60  0E0A               	movlw	10
   493   007E62  0102               	movlb	2	; () banked
   494   007E64  6F0F               	movwf	15,b	;volatile
   495                           
   496                           ;main.c: 19:     RC7PPS = 0x0B;
   497   007E66  0E0B               	movlw	11
   498   007E68  6F18               	movwf	24,b	;volatile
   499                           
   500                           ;main.c: 21:     PWM1ERS = 0b0000;
   501   007E6A  0E00               	movlw	0
   502   007E6C  6E60               	movwf	96,c	;volatile
   503                           
   504                           ;main.c: 22:     PWM1CLK = 0b0010;
   505   007E6E  0E02               	movlw	2
   506   007E70  6E61               	movwf	97,c	;volatile
   507                           
   508                           ;main.c: 25:     PWM1PR = 0x00C7;
   509   007E72  0E00               	movlw	0
   510   007E74  6E64               	movwf	100,c	;volatile
   511   007E76  0EC7               	movlw	199
   512   007E78  6E63               	movwf	99,c	;volatile
   513                           
   514                           ;main.c: 26:     PWM1CPRE = 0x00;
   515   007E7A  0E00               	movlw	0
   516   007E7C  6E65               	movwf	101,c	;volatile
   517                           
   518                           ;main.c: 27:     PWM1GIE = 0x00;
   519   007E7E  0E00               	movlw	0
   520   007E80  6E68               	movwf	104,c	;volatile
   521   007E82                     
   522                           ; BSR set to: 2
   523                           ;main.c: 30:     PWM1CONbits.LD = 0;
   524   007E82  9469               	bcf	105,2,c	;volatile
   525   007E84                     
   526                           ; BSR set to: 2
   527                           ;main.c: 34:     PWM1S1CFGbits.POL1 = 0;
   528   007E84  9C6A               	bcf	106,6,c	;volatile
   529   007E86                     
   530                           ; BSR set to: 2
   531                           ;main.c: 35:     PWM1S1CFGbits.POL2 = 0;
   532   007E86  9E6A               	bcf	106,7,c	;volatile
   533   007E88                     
   534                           ; BSR set to: 2
   535                           ;main.c: 37:     PWM1S1CFGbits.PPEN = 0;
   536   007E88  966A               	bcf	106,3,c	;volatile
   537                           
   538                           ;main.c: 38:     PWM1S1CFGbits.MODE = 0b001;
   539   007E8A  506A               	movf	106,w,c	;volatile
   540   007E8C  0BF8               	andlw	-8
   541   007E8E  0901               	iorlw	1
   542   007E90  6E6A               	movwf	106,c	;volatile
   543                           
   544                           ;main.c: 40:     PWM1S1P1 = 0x0000;
   545   007E92  0E00               	movlw	0
   546   007E94  6E6C               	movwf	108,c	;volatile
   547   007E96  0E00               	movlw	0
   548   007E98  6E6B               	movwf	107,c	;volatile
   549                           
   550                           ;main.c: 41:     PWM1S1P2 = 0x0000;
   551   007E9A  0E00               	movlw	0
   552   007E9C  6E6E               	movwf	110,c	;volatile
   553   007E9E  0E00               	movlw	0
   554   007EA0  6E6D               	movwf	109,c	;volatile
   555   007EA2                     
   556                           ; BSR set to: 2
   557                           ;main.c: 43:     PWM1CONbits.EN = 1;
   558   007EA2  8E69               	bsf	105,7,c	;volatile
   559   007EA4                     
   560                           ; BSR set to: 2
   561   007EA4  0012               	return		;funcret
   562   007EA6                     __end_of_PWMsetup:
   563                           	callstack 0
   564   000000                     
   565                           	psect	rparam
   566   000000                     tosu	equ	0x4FF
   567                           tosh	equ	0x4FE
   568                           tosl	equ	0x4FD
   569                           stkptr	equ	0x4FC
   570                           pclatu	equ	0x4FB
   571                           pclath	equ	0x4FA
   572                           pcl	equ	0x4F9
   573                           tblptru	equ	0x4F8
   574                           tblptrh	equ	0x4F7
   575                           tblptrl	equ	0x4F6
   576                           tablat	equ	0x4F5
   577                           prodh	equ	0x4F4
   578                           prodl	equ	0x4F3
   579                           indf0	equ	0x4EF
   580                           postinc0	equ	0x4EE
   581                           postdec0	equ	0x4ED
   582                           preinc0	equ	0x4EC
   583                           plusw0	equ	0x4EB
   584                           fsr0h	equ	0x4EA
   585                           fsr0l	equ	0x4E9
   586                           wreg	equ	0x4E8
   587                           indf1	equ	0x4E7
   588                           postinc1	equ	0x4E6
   589                           postdec1	equ	0x4E5
   590                           preinc1	equ	0x4E4
   591                           plusw1	equ	0x4E3
   592                           fsr1h	equ	0x4E2
   593                           fsr1l	equ	0x4E1
   594                           bsr	equ	0x4E0
   595                           indf2	equ	0x4DF
   596                           postinc2	equ	0x4DE
   597                           postdec2	equ	0x4DD
   598                           preinc2	equ	0x4DC
   599                           plusw2	equ	0x4DB
   600                           fsr2h	equ	0x4DA
   601                           fsr2l	equ	0x4D9
   602                           status	equ	0x4D8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     19      19
    BANK5           160      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    loop@pwm12	const PTR volatile int  size(2) Largest target is 3327
		 -> RAM(DATA[3327]), 

    loop@pwm11	const PTR volatile int  size(2) Largest target is 3327
		 -> RAM(DATA[3327]), 

    setPWM@pDutyReg	const PTR volatile int  size(2) Largest target is 3327
		 -> RAM(DATA[3327]), 

    setPWM@pConReg	const PTR volatile int  size(2) Largest target is 3327
		 -> RAM(DATA[3327]), 


Critical Paths under _main in COMRAM

    _main->_loop
    _loop->_setPWM

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     560
                           _PWMsetup
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                11    11      0     560
                                             14 COMRAM     5     5      0
                             _setPWM
 ---------------------------------------------------------------------------------
 (2) _setPWM                                              14    11      3     444
                                              0 COMRAM    14    11      3
 ---------------------------------------------------------------------------------
 (1) _PWMsetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWMsetup
   _loop
     _setPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             200      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     13      13       1       20.0%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK5            A0      0       0       4        0.0%
BANK5               A0      0       0       5        0.0%
BITBANK6           100      0       0       6        0.0%
BANK6              100      0       0       7        0.0%
BITBANK7           100      0       0       8        0.0%
BANK7              100      0       0       9        0.0%
BITBANK8           100      0       0      10        0.0%
BANK8              100      0       0      11        0.0%
BITBANK9           100      0       0      12        0.0%
BANK9              100      0       0      13        0.0%
BITBANK10          100      0       0      14        0.0%
BANK10             100      0       0      15        0.0%
BITBANK11          100      0       0      16        0.0%
BANK11             100      0       0      17        0.0%
BITBANK12          100      0       0      18        0.0%
BANK12             100      0       0      19        0.0%
BITBIGSFR_1        100      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITBIGSFRh          37      0       0      22        0.0%
BITBIGSFRlhhhhh     58      0       0      23        0.0%
BITBIGSFRlhhhhl      2      0       0      24        0.0%
BITBIGSFRlhhhl       1      0       0      25        0.0%
BITBIGSFRlhhl      247      0       0      26        0.0%
BITBIGSFRlhl         8      0       0      27        0.0%
BITBIGSFRll        20F      0       0      28        0.0%
ABS                  0      0       0      29        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_6             0      0       0     200        0.0%
SFR_6                0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Fri Jun 23 13:42:32 2023

                     l31 7EA4                       l34 7F48                       l42 7EEE  
                     l35 7F80                       l36 7FB8                       l37 7FFA  
                     u70 7F24                       u71 7F20                       u80 7F5C  
                     u81 7F58                       u65 7EFC                       u90 7F94  
                     u91 7F90                      l810 7ED8                      l804 7EB6  
                    l812 7E4C                      l750 7E86                      l742 7E5C  
                    l806 7EC6                      l814 7E50                      l752 7E88  
                    l744 7E60                      l808 7ED4                      l754 7EA2  
                    l746 7E82                      l748 7E84                      l780 7F24  
                    l790 7FD8                      l782 7F5C                      l792 7FEE  
                    l784 7F94                      l786 7FC0                      l778 7EF0  
                    l794 7EA6                      l788 7FD0                      l796 7EAE  
                    l798 7EAE                      u100 7EEE                      u101 7EEA  
                    u117 7ECC                      wreg 04E8                     _main 7E4C  
                   _loop 7EA6                     fsr2h 04DA                     fsr2l 04D9  
                   start 7FFC             ___param_bank 0000                    ?_main 0501  
                  ?_loop 0501            setPWM@pConReg 050B            setPWM@address 0501  
                  loop@i 0512                    plusw2 04DB                    status 04D8  
       __end_of_PWMsetup 7EA6          __initialization 7E46             __end_of_main 7E5C  
           __end_of_loop 7EF0                   ??_main 0514                   ??_loop 050F  
          __activetblptr 0000                   _RB6PPS 020F                   _RC7PPS 0218  
                 _PWM1PR 0463           setPWM@pDutyReg 0507                   _setPWM 7EF0  
                 isa$std 0001               __accesstop 0560  __end_of__initialization 7E46  
          ___rparam_used 0001           __pcstackCOMRAM 0501                ?_PWMsetup 0501  
            loop@buffer2 0510                  ?_setPWM 0501               ??_PWMsetup 0501  
                _PWM1CLK 0461                  _PWM1GIE 0468                  _PWM1ERS 0460  
                __Hparam 0000                  __Lparam 0000                  __pcinit 7E46  
                __ramtop 0E00                  __ptext0 7E4C                  __ptext1 7EA6  
                __ptext2 7EF0                  __ptext3 7E5C     end_of_initialization 7E46  
                postdec2 04DD                  postinc2 04DE                _TRISBbits 04C7  
              _TRISCbits 04C8             setPWM@conReg 0509            _PWM1S1CFGbits 046A  
         __end_of_setPWM 7FFC      start_initialization 7E46                 ??_setPWM 0504  
             setPWM@temp 050D                 _PWM1S1P1 046B                 _PWM1S1P2 046D  
               _PWM1CPRE 0465                 _PWMsetup 7E5C                 __Hrparam 0000  
               __Lrparam 0000                 isa$xinst 0000              _PWM1CONbits 0469  
       setPWM@duty_cycle 0503  
